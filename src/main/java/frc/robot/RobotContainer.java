// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.commands.driveCommands.cmdDriveStraight;
import frc.robot.commands.driveCommands.cmdStrafe;
import frc.robot.commands.driveCommands.cmdTurnByGyro;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.XboxController;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final TemplateSubsystem m_templateSubsystem = new TemplateSubsystem();
    public final DriveTrain m_driveTrain = new DriveTrain();
    public final SubGyro m_subGyro = new SubGyro();
    public final Arm m_arm = new Arm();

// Joysticks
private final XboxController driveController = new XboxController(0);
private final XboxController articController = new XboxController(1);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    //SmartDashboard.putData("cmdDriveStraight", new cmdTurnByGyro());
    
    SmartDashboard.putData("testdrive", new cmdDriveStraight(5,.25,0.0));
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
      // Test Drive code
    m_chooser.setDefaultOption("driveforward", new cmdDriveStraight(1,.25,0.0));
    m_chooser.addOption("driveforward", new cmdDriveStraight(1,.25,0.0));
    m_chooser.addOption("driveback", new cmdDriveStraight(-1, .25, 0.0));

    m_chooser.addOption("turn-90 (left)", new cmdTurnByGyro(90,.2,true));
    m_chooser.addOption("turn 90 (right)", new cmdTurnByGyro(90,.2,false));
   
    m_chooser.addOption("turn-180 (left)", new cmdTurnByGyro(180,.2,true));
    m_chooser.addOption("turn 180 (right)", new cmdTurnByGyro(180,.2,false));

    m_chooser.addOption("strafe left", new cmdStrafe(1, .25, 0.0));
    m_chooser.addOption("strafe right", new cmdStrafe(-1, .25, 0.0));

    SmartDashboard.putData("turn-0", new cmdTurnByGyro(0,.2,true));
    SmartDashboard.putData("driveforward", new cmdDriveStraight(1,.25,0.0));
    SmartDashboard.putData("driveback", new cmdDriveStraight(-1, .25, 0.0));
    SmartDashboard.putData("turn-90 (left)", new cmdTurnByGyro(90,.2,true));
    SmartDashboard.putData("turn 90 (right)", new cmdTurnByGyro(90,.2,false));
    SmartDashboard.putData("strafe left", new cmdStrafe(1, .25, 0.0));
    SmartDashboard.putData("strafe right", new cmdStrafe(-1, .25, 0.0));
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
   driveController.getLeftY();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getDriveController() {
      return driveController;
    }

public XboxController getArticController() {
      return articController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }

  public void updateSmartboard (){
    
    SmartDashboard.putNumber("Heading", m_subGyro.getNormaliziedNavxAngle());
    SmartDashboard.putNumber("Dist", m_driveTrain.getDistanceTraveledInches());
    SmartDashboard.putNumber("ArmPos", m_arm.getArmPos());
  }


}

